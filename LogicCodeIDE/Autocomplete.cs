using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicCodeIDE
{
    internal class Autocomplete
    {
        static public readonly List<string> txt = new List<string> {
"add",
"and",
"argslen",
"bitadder",
"bitextender.new",
"bitextender.on",
"bitfinder",
"bitfindertype.highestorder0",
"bitfindertype.highestorder1",
"bitfindertype.lowestorder0",
"bitfindertype.lowestorder1",
"bitselector",
"bitset.concat",
"bitset.len",
"bitset.parse",
"bitset.reverse",
"bitset.slice",
"bitset.tostring",
"buffer",
"cmpequal",
"cmpgreater",
"cmpless",
"controlledbuffer",
"controlledinverter",
"debug.clear",
"debug.log",
"decoder",
"demux",
"div",
"evenparity",
"extensiontype.One",
"extensiontype.Zero",
"function.argslen",
"function.getargname",
"function.isNative",
"function.isRuntime",
"integer.abs",
"integer.clamp",
"integer.equals",
"integer.isnegative",
"integer.ispositive",
"integer.max",
"integer.maxvalue",
"integer.min",
"integer.minvalue",
"integer.parse",
"integer.sign",
"integer.tostring",
"isnone",
"mul",
"mux",
"nand",
"negator",
"nor",
"not",
"number.PI",
"number.abs",
"number.clamp",
"number.equals",
"number.isfinite",
"number.isinfinity",
"number.isnan",
"number.isnegative",
"number.isnegativeinfinity",
"number.ispositive",
"number.ispositiveinfinity",
"number.max",
"number.maxvalue",
"number.min",
"number.minvalue",
"number.nan",
"number.negativeinfinity",
"number.negativezero",
"number.parse",
"number.positiveinfinity",
"number.tostring",
"oddparity",
"one",
"or",
"print",
"prioritydecoder",
"refbitset.get",
"refbitset.set",
"shifter",
"shifttype.LogicalLeft",
"shifttype.LogicalRight",
"shifttype.RotateLeft",
"shifttype.RotateRight",
"string.byte",
"string.char",
"string.len",
"string.lower",
"string.reverse",
"string.upper",
"sub",
"truthtable",
"type",
"xnor",
"xor",
"zero",
            // keywords
            "case",
            "const",
            "fun",
            "if",
            "int",
            "num",
            "ref",
            "return",
            "true",
            "false",
            "none",
            "var",
            "while"
        };

    }
}
